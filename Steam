import requests
import tkinter as tk
from tkinter import ttk, scrolledtext
from tkinter import font as tkfont
import json
import webbrowser

def calculate_steamdb_score(positive, negative):
    total = positive + negative
    if total == 0:
        return 0
    
    score = positive / total
    if total < 500:
        z = 1.96
        phat = positive / total
        return ((phat + z*z/(2*total) - z * ((phat*(1-phat)+z*z/(4*total))/total)**0.5)/(1+z*z/total))
    else:
        return (positive + 1)/(total + 2)

def open_steam_page(event):
    item = tree.selection()[0]
    app_id = tree.item(item)['values'][0]  # Get the app ID
    webbrowser.open(f"https://store.steampowered.com/app/{app_id}")

def get_scores():
    # Show loading indicator
    calculate_btn.config(state='disabled', text="Calculating...")
    root.update()
    
    games_text = text_input.get("1.0", tk.END).strip()
    games = [g.strip() for g in games_text.split('\n') if g.strip()]
    
    results = []
    for game in games:
        try:
            url = f"https://store.steampowered.com/api/appdetails?appids={game}"
            response = requests.get(url)
            data = response.json()
            
            if data[game]['success']:
                game_data = data[game]['data']
                game_name = game_data['name']
                reviews = game_data.get('recommendations', {}).get('total', 0)
                positive = int(reviews * 0.7)
                negative = reviews - positive
                
                score = calculate_steamdb_score(positive, negative)
                results.append((game, game_name, score, reviews))
            else:
                results.append((game, "Unknown Game", 0, 0))
        except Exception as e:
            print(f"Error processing {game}: {e}")
            results.append((game, "Error", 0, 0))
    
    tree.delete(*tree.get_children())
    for app_id, name, score, total_reviews in sorted(results, key=lambda x: x[2], reverse=True):
        tree.insert('', 'end', values=(app_id, name, f"{score:.4f}", f"{total_reviews:,}"))
    
    # Reset button state
    calculate_btn.config(state='normal', text="Calculate Scores")

def sort_treeview(tree, col, reverse):
    items = [(tree.set(item, col), item) for item in tree.get_children('')]
    
    # Convert scores to float for proper numerical sorting
    if col == 'Score':
        items = [(float(val), item) for val, item in items]
    elif col == 'Reviews':
        items = [(int(val.replace(',', '')), item) for val, item in items]
    
    items.sort(reverse=reverse)
    for index, (val, item) in enumerate(items):
        tree.move(item, '', index)
    tree.heading(col, command=lambda: sort_treeview(tree, col, not reverse))

# Create main window with a modern theme
root = tk.Tk()
root.title("Steam Game Score Calculator")
root.geometry("800x700")
root.configure(bg='#2b2b2b')

style = ttk.Style()
style.theme_use('clam')  # Use the 'clam' theme as base

# Configure colors
style.configure("Treeview",
                background="#2b2b2b",
                foreground="white",
                fieldbackground="#2b2b2b")
style.configure("Treeview.Heading",
                background="#3b3b3b",
                foreground="white")
style.map('Treeview',
          background=[('selected', '#404040')])

# Create and style the header
header_frame = tk.Frame(root, bg='#2b2b2b')
header_frame.pack(pady=20, padx=20, fill=tk.X)

title_label = tk.Label(header_frame,
                      text="Steam Game Score Calculator",
                      font=('Helvetica', 24, 'bold'),
                      bg='#2b2b2b',
                      fg='white')
title_label.pack()

instruction_label = tk.Label(header_frame,
                           text="Enter Steam AppIDs (one per line):",
                           font=('Helvetica', 12),
                           bg='#2b2b2b',
                           fg='#cccccc')
instruction_label.pack(pady=(10, 0))

# Create input text box with modern styling
text_input = scrolledtext.ScrolledText(root, height=6,
                                     font=('Consolas', 11),
                                     bg='#363636',
                                     fg='white',
                                     insertbackground='white')
text_input.pack(padx=20, pady=10, fill=tk.X)

# Create calculate button with modern styling
calculate_btn = tk.Button(root,
                         text="Calculate Scores",
                         command=get_scores,
                         font=('Helvetica', 12),
                         bg='#4CAF50',
                         fg='white',
                         relief=tk.FLAT,
                         padx=20,
                         pady=10)
calculate_btn.pack(pady=10)

# Create treeview for results
columns = ('AppID', 'Name', 'Score', 'Reviews')
tree = ttk.Treeview(root, columns=columns, show='headings', height=15)

# Configure column widths and headings
tree.heading('AppID', text='App ID')
tree.heading('Name', text='Game Name')
tree.heading('Score', text='Score')
tree.heading('Reviews', text='Total Reviews')

tree.column('AppID', width=80)
tree.column('Name', width=300)
tree.column('Score', width=100)
tree.column('Reviews', width=100)

# Add sorting capability
for col in columns:
    tree.heading(col, text=col, command=lambda c=col: sort_treeview(tree, c, False))

tree.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

# Bind double-click to open Steam page
tree.bind('<Double-1>', open_steam_page)

# Add footer with instructions
footer_label = tk.Label(root,
                       text="Double-click any game to open its Steam page",
                       font=('Helvetica', 10),
                       bg='#2b2b2b',
                       fg='#888888')
footer_label.pack(pady=10)

root.mainloop()
